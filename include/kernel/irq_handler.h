#ifndef _IRQ_HANDLER_H_
#define _IRQ_HANDLER_H_

#define IRQ_HANDLER_ENTRY(irq_id) \
	void irq##irq_id##_handler_entry(); \
	asm( \
		".global irq" #irq_id "_handler_entry\n" \
		"irq" #irq_id "_handler_entry:\n" \
		"pusha\n" \
		"mov " #irq_id ", %eax\n" \
		"push %eax\n" \
		"call general_interrupt_handler\n" \
		"pop %eax\n" \
		"popa\n" \
		"iret" \
	)

IRQ_HANDLER_ENTRY(0);
IRQ_HANDLER_ENTRY(1);
IRQ_HANDLER_ENTRY(2);
IRQ_HANDLER_ENTRY(3);
IRQ_HANDLER_ENTRY(4);
IRQ_HANDLER_ENTRY(5);
IRQ_HANDLER_ENTRY(6);
IRQ_HANDLER_ENTRY(7);
IRQ_HANDLER_ENTRY(8);
IRQ_HANDLER_ENTRY(9);
IRQ_HANDLER_ENTRY(10);
IRQ_HANDLER_ENTRY(11);
IRQ_HANDLER_ENTRY(12);
IRQ_HANDLER_ENTRY(13);
IRQ_HANDLER_ENTRY(14);
IRQ_HANDLER_ENTRY(15);
IRQ_HANDLER_ENTRY(16);
IRQ_HANDLER_ENTRY(17);
IRQ_HANDLER_ENTRY(18);
IRQ_HANDLER_ENTRY(19);
IRQ_HANDLER_ENTRY(20);
IRQ_HANDLER_ENTRY(21);
IRQ_HANDLER_ENTRY(22);
IRQ_HANDLER_ENTRY(23);
IRQ_HANDLER_ENTRY(24);
IRQ_HANDLER_ENTRY(25);
IRQ_HANDLER_ENTRY(26);
IRQ_HANDLER_ENTRY(27);
IRQ_HANDLER_ENTRY(28);
IRQ_HANDLER_ENTRY(29);
IRQ_HANDLER_ENTRY(30);
IRQ_HANDLER_ENTRY(31);
IRQ_HANDLER_ENTRY(32);
IRQ_HANDLER_ENTRY(33);
IRQ_HANDLER_ENTRY(34);
IRQ_HANDLER_ENTRY(35);
IRQ_HANDLER_ENTRY(36);
IRQ_HANDLER_ENTRY(37);
IRQ_HANDLER_ENTRY(38);
IRQ_HANDLER_ENTRY(39);

#endif
